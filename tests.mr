@test(simple text)
  @input
    hi
  @output
    Line(hi)

@test(two lines)
  @input
    hi
    ho
  @output
    Line(hi)Line(ho)

@test(Empty line)
  @input
    first

    third
  @output{Line(first)Line()Line(third)}

@test(simple command)
  @input{@something}
  @output{@something}

@test(three inline commands)
  @input
    @a@b@c
  @output
    Line(@a@b@c)

@test(spaces between inline commands)
  @input{@a  @b@c}
  @output{Line(@a  @b@c)}

@test(spaces between inline commands 2)
  @input
    @a @b @c
  @output
    Line(@a @b @c)
      
@test(text and inline commands)
  @input{some text@a @b @c}
  @output
    Line(some text@a @b @c)
  
@test(two lines with inline commands)
  @input
    @a@b@c
    @d@e
  @output
    Line(@a@b@c)Line(@d@e)

@test(remove spaces in arguments)
  @input
    @cmd(   a   ,    b  ,, c )
  @output
    @cmd(a,b,,c)

@test(remove spaces in arguments 2)
  @input
    @mycmd( a =  3 , b... ,  + +c + + )
      blis blas blus
  @output
    @mycmd(a =  3,b...,+ +c + +)`Line(blis blas blus)`

@test(text outside and inside)
  @input
    Text outside
    @cmd
      Text inside
  @output
    Line(Text outside)@cmd`Line(Text inside)`

@test(empty line at the beginning)
  @input

    @emptylineatbeginning
  @output 
    Line()@emptylineatbeginning

@test(two empty lines at different levels)
  @input

    @something
  
      Yay
  @output
    Line()@something`Line()Line(Yay)`

@test(Command with block subcommands)
  @input

    @main
      @a
      @b
      @c
  @output
    Line()@main`@a@b@c`

@test(Command with inline subcommands)
  @input

    @main
      @a@b@c
  @output
    Line()@main`Line(@a@b@c)`

@test(Command with several lines)
  @input

    @main
      a
      b
      c
  @output
    Line()@main`Line(a)Line(b)Line(c)`
  
@test(Empty lines in subcommand)
  @input
    @main
      abc

      def
  @output
    @main`Line(abc)Line()Line(def)`
  
@test(Indentation in inner text)
  @input
    @command
      1st
        2nd
      3rd
  @output
    @command`Line(1st)Line(  2nd)Line(3rd)`
      
@test(Indentation in inner text 2)
  @input
    @command
        1st
        2nd
      3rd
  @output
    @command`Line(  1st)Line(  2nd)Line(3rd)`

@test(Different delimiters 1)
  @input
    @a{[]}@b[{}]
  @output
    Line(@a{[]}@b[{}])

@test(Different delimiters 2)
  @input 
    @a<A>@b<<B>>@c<<<C>>>@d<<<<D>>>>
  @output
    Line(@a<A>@b<<B>>@c<<<C>>>@d<<<<D>>>>)

@test(Different delimiters 3 + no line)
  @input{@aaa[@bbb<@ccc>]}
  @output
    @aaa[@bbb<@ccc>]

@test(Nested block commands)
  @input
    @a
      @b
        @c
  @output
    @a`@b`@c``

@test(More nested block commands FIXME)
  @input
    @a
      @b
        @c
      @d
        @e
          @f
  @output
    @a`@b`@c`@d`@e`@f```

@test(C++ hello world)
  @input
    @code
      #include<iostream>
      using namespace std;

      int main() {
        cout << "hi" << endl;
      }
  @output
    @code`Line(#include<iostream>)Line(using namespace std;)Line()Line(int main() {)Line(  cout << "hi" << endl;)Line(})`

@test(Where empty lines attach 1)
  @input
    @first
      1

    @second
      2

  @output
    @first`Line(1)`Line()@second`Line(2)`

@test(Where empty lines attach 2)
  @input
    @a
      1
    @b
      2

    @c
      3

    
    @d
      4

  @output
    @a`Line(1)`@b`Line(2)`Line()@c`Line(3)Line()`Line()@d`Line(4)`

@test(Where empty lines attach 3)
  @input
    @a
      1



    @b

  @output
    @a`Line(1)Line()Line()`Line()@b


@test(Where empty lines attach 4)
  @input
    @a


    @b

  @output
    @aLine()Line()@b

@test(Nested inline commands)
  @input
    @big[@a{1}@b{2}@c@d{@e<3>}]
  @output
    @big[Line(@a{1}@b{2}@c@d{@e<3>})]

@test(Command char)
  @input{@@}
  @output{Line(@)}

@test(Command char 2)
  @input{1@@}
  @output{Line(1@)}

@test(same delimiter nested)
  @input
    @a{@b{@c}}
  @output
    Line(@a{@b{@c}})